{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\fswiss\fcharset0 Arial-BoldMT;
\f3\fnil\fcharset0 HelveticaNeue-Bold;\f4\fnil\fcharset0 HelveticaNeue;\f5\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qr\partightenfactor0

\f0\fs24 \cf0                                                 
\f1                             Awais   Anwar  \
F2021266105\
Section     V7\

\f2\b\fs28 \ul \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0
\cf0 \ulc0 DATA  STRUCTURES AND ALGORITHMS: \

\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Submitted to :
\fs28  "DR. MUHAMMAD UMAR SULEMAN\'94. 
\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f2\b\fs28 \cf0 \ul Project Report:
\fs24 \
\
\

\fs28 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone Project is basically based on e-mail type mail box that offers some features that are given below:
\fs24 \

\fs28 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f3\b\fs26 \ul createAccount() :
\f4\b0 \ulnone creates a new account by prompting the user for a user ID and password and storing them in a file called "login_info.csv\'94.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b\fs24 \cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\uc0\u8226 	}\ul l
\f3\fs26 ogin() : 
\f4\b0 \ulnone allows a user to log in by prompting them for their user ID and password and checking if they match any stored in the "login_info.csv" file
\f2\b\fs24 \ul  
\f1\b0 \ulnone If the user entered id matches with the id when logging in then he is granted access to further menu and if not then the user is asked to enter correct user id or password.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0
\f5\fs18 \cf0 {\listtext	\uc0\u8226 	}
\f3\b\fs26 \ul newNode()
\f4\b0 \ulnone  :creates a new node for the message data and id in tree data structure.\
  \
\ls3\ilvl0
\f5\fs18 {\listtext	\uc0\u8226 	}
\f3\b\fs26 \ul insert() :
\f4\b0 \ulnone inserts the new node into the tree structure containing id and messages.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f3\b \ul readData():
\f4\b0 \ulnone  reads data from a file and insert them into the tree structure.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\uc0\u8226 	}
\f3\b \ul inorderTraversal(): 
\f4\b0 \ulnone traverses the tree and prints out the data in the order of left-root-right.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0
\f3\b \cf0 {\listtext	\uc0\u8226 	}
\fs28 \ul compose() :
\f4\b0 \ulnone  
\fs26 It is a feature of the program that allows a user to compose a new message by entering the message and an ID for the message.First, the function prompts the user to enter the message by using the getline() function, which allows the user to input a string that can contain spaces. The function then prompts the user to enter an ID for the message, which is stored as a string in the variable idString.Next, the function checks if the entered ID is a valid number by iterating through each character in idString and checking if it is a digit using the isdigit() function. If any non-digit character is found, the isValid variable is set to false and the loop breaks.If the entered ID is found to be valid, the function converts the ID from a string to an integer using the stoi() function, and opens the "sent_box.csv" file in reading mode to read the existing data. Then it concatenates the new message and ID at the top of the existing data and opens the file in truncate mode, which erases all the previous content, and writes the entire data to the file using the ofstream class. The file is then closed.If the entered ID is found to be invalid, the function prints an error message "Invalid id entered".\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0
\f3\b \cf0 {\listtext	\uc0\u8226 	}
\fs28 \ul Search ():
\fs26   
\f4\b0 \ulnone This function is a recursive implementation of a search algorithm for a binary search tree. The tree is made up of "Node" objects, which have an "id" and a "message" string attribute. The function takes as input a pointer to the root of the tree, an integer "id", a string "word", and an integer "choice".The function first checks if the root is null, and if it is, the function returns null.If choice is 1, the function compares the id of the root with the input id, if they are equal, the function returns the root. If the input id is less than the root's id, the function recursively calls itself on the left child of the root. If the input id is greater than the root's id, the function recursively calls itself on the right child of the root.If choice is not 1, the function looks for the word in the root's message, if it is present, the function returns the root. If the word is not present in the root's message, the function recursively calls itself on the left child and checks if the result is not null. If the result is not null, the function returns the result. If the result is null, the function recursively calls itself on the right child and returns the result.This function is used for searching the tree for a node with a specific id or message that contains a specific word, depending on the value of the choice parameter.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0
\f3\b \cf0 {\listtext	\uc0\u8226 	}
\fs28 \ul Delete(): 
\f4\b0\fs26 \ulnone This function is used to delete a specific node from the binary search tree. The function takes as input a pointer to the root of the tree, an integer "id", a string "word", and an integer "choice".The function first uses the "search" function to locate the node that needs to be deleted. If choice is 1, the function searches for a node with a specific id, and if choice is 2, the function searches for a node whose message contains a specific word. If the node is not found, the function prints out a message indicating that the node does not exist and returns.The function then finds the node with the minimum value in the right subtree of the node to be deleted. This node is used to replace the node to be deleted. The function then replaces the id and message of the node to be deleted with the id and message of the minimum node.The function then uses recursion to delete the minimum node. If the minimum node has a right child, the function recursively calls itself on that child, passing the id and message of the minimum node. If the minimum node does not have a right child, the function checks if it has a left child, if it does, the function sets the left child to NULL and then deletes the minimum node.Finally, the function searches for the deleted node again using the "search" function and if it's not found it prints a message indicating that the node is deleted.It is important to note that this function does not maintain the property of the binary search tree and would not work correctly if there are duplicate values in the tree.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\pardeftab560\li720\fi-720\slleading20\partightenfactor0
\ls9\ilvl0
\f3\b \cf0 {\listtext	\uc0\u8226 	}
\fs28 \ul Archive();
\f4\b0\fs26 \ulnone This function is used to archive or unarchive messages stored in a binary search tree. The function takes as input a pointer to the root of the tree.The function prompts the user to enter a choice of 1 to archive a message or 2 to unarchive a message. If the user enters 1, the function prompts the user to enter the id of the message to archive. The function then uses the "search" function to find the node with that id in the binary search tree. If the node is found, the function opens an output file stream to write the message and id of that node to a file called "archived_messages.csv", appending the new message at the end of the file. After that, the function calls "deleteNode" function to delete the node from the binary search tree and also calls "deleteFromFile" function to delete the message from another file called "inbox.csv". If the node is not found, the function displays a message indicating that the message was not found.If the user enters 2, the function prompts the user to enter the id of the message to unarchive. The function then opens an input file stream to read the contents of the "archived_messages.csv" file. It then reads each line of the file and parses it to extract the message and id. If the id of the current line in the file matches the user-specified id, the function reinserts the message and id into the binary search tree, and also appends the message to "inbox.csv" file. If the id does not match, the function writes the line to a temporary file called "temp.csv". At the end, it checks if the message was found and if it was not found it displays a message indicating that the message was not found. Then it closes the files, deletes "archived_messages.csv" file and renames "temp.csv" to "archived_messages.csv".If the user enters an invalid choice, the function displays a message indicating that the choice is invalid.This code is used to move messages from one file to another and also keep track of the messages in the binary search tree.\
\pard\tx566\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
\pard\tx220\tx720\pardeftab560\li720\fi-720\slleading20\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\uc0\u8226 	}Moreover it have 3 csv files named as inbox.csv , sent_box.csv and archived_messages.csv.I have stored some random data in inbox and sent_box file to test my code.The random id\'92s are assigned to these messages on excel on the basis of which they are searched and deleted.\
\pard\tx566\pardeftab560\slleading20\partightenfactor0
\cf0 \
\
The inbox and sent_box will have same functionality as mentioned above.Now I will be working on Networking . Hoping so will complete in 2 or 3 days.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\b\fs24 \cf0 \ul                                 \
                                                              }