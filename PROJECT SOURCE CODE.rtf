{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red183\green111\blue179;\red23\green23\blue23;\red70\green137\blue204;
\red194\green126\blue101;\red202\green202\blue202;\red67\green192\blue160;\red140\green211\blue254;\red212\green214\blue154;
\red167\green197\blue152;\red89\green138\blue67;\red205\green173\blue106;}
{\*\expandedcolortbl;;\cssrgb\c77255\c52549\c75294;\cssrgb\c11765\c11765\c11765;\cssrgb\c33725\c61176\c83922;
\cssrgb\c80784\c56863\c47059;\cssrgb\c83137\c83137\c83137;\cssrgb\c30588\c78824\c69020;\cssrgb\c61176\c86275\c99608;\cssrgb\c86275\c86275\c66667;
\cssrgb\c70980\c80784\c65882;\cssrgb\c41569\c60000\c33333;\cssrgb\c84314\c72941\c49020;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f0\b\fs28 \cf0 \ul \ulc0 DSA Project Source Code:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \ulc0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0
\cf0 \ulc0 \
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \ulc0 \
\pard\pardeftab720\sl360\partightenfactor0

\f1\b0 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ulnone \outl0\strokewidth0 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <iostream>\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <fstream>\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <sstream>\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf5 \strokec5 <string>\cf6 \cb1 \strokec6 \
\cf2 \cb3 \strokec2 using\cf6 \strokec6  \cf4 \strokec4 namespace\cf6 \strokec6  \cf7 \strokec7 std\cf6 \strokec6 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 struct\cf6 \strokec6  \cf7 \strokec7 Node\cf6 \strokec6  \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 left\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 right\cf6 \strokec6 ;\cb1 \
\cb3 \};\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf9 \strokec9 createAccount\cf6 \strokec6 () \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 userId\cf6 \strokec6 ;\cb1 \
\cf7 \cb3 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 password\cf6 \strokec6 ;\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter a new user id: "\cf6 \strokec6 ;\cb1 \
\cf8 \cb3 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 userId\cf6 \strokec6 ;\cb1 \
\cf8 \cb3 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter a new password: "\cf6 \strokec6 ;\cb1 \
\cf8 \cb3 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 password\cf6 \strokec6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 ofstream\cf6 \strokec6  \cf8 \strokec8 loginFile\cf6 \strokec6 (\cf5 \strokec5 "login_info.csv"\cf6 \strokec6 , \cf7 \strokec7 ios\cf6 \strokec6 ::\cf8 \strokec8 app\cf6 \strokec6 );\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8 loginFile\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 userId\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 ","\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 password\cf6 \strokec6  \cf9 \strokec9 <<endl\cf6 \strokec6 ;\cb1 \
\cf8 \cb3 \strokec8 loginFile\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\
\cf8 \cb3 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Account created successfully!"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3 \}\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 int\cf6 \strokec6  \cf9 \strokec9 login\cf6 \strokec6 () \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 enteredUserId\cf6 \strokec6 ;\cb1 \
\cf7 \cb3 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 enteredPassword\cf6 \strokec6 ;\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter your user id: "\cf6 \strokec6 ;\cb1 \
\cf8 \cb3 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 enteredUserId\cf6 \strokec6 ;\cb1 \
\cf8 \cb3 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter your password: "\cf6 \strokec6 ;\cb1 \
\cf8 \cb3 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 enteredPassword\cf6 \strokec6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 ifstream\cf6 \strokec6  \cf8 \strokec8 loginFile\cf6 \strokec6 (\cf5 \strokec5 "login_info.csv"\cf6 \strokec6 );\cb1 \
\cf7 \cb3 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 line\cf6 \strokec6 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 while\cf6 \strokec6  (\cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 loginFile\cf6 \strokec6 , \cf8 \strokec8 line\cf6 \strokec6 )) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 stringstream\cf6 \strokec6  \cf8 \strokec8 ss\cf6 \strokec6 (\cf8 \strokec8 line\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 userId\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 password\cf6 \strokec6 ;\cb1 \
\cb3     \cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 ss\cf6 \strokec6 , \cf8 \strokec8 userId\cf6 \strokec6 , \cf5 \strokec5 ','\cf6 \strokec6 );\cb1 \
\cb3     \cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 ss\cf6 \strokec6 , \cf8 \strokec8 password\cf6 \strokec6 , \cf5 \strokec5 ','\cf6 \strokec6 );\cb1 \
\cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 enteredUserId\cf6 \strokec6  \cf9 \strokec9 ==\cf6 \strokec6  \cf8 \strokec8 userId\cf6 \strokec6  && \cf8 \strokec8 enteredPassword\cf6 \strokec6  \cf9 \strokec9 ==\cf6 \strokec6  \cf8 \strokec8 password\cf6 \strokec6 ) \{\cb1 \
\cb3        \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Login successful!"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf2 \strokec2 return\cf6 \strokec6  \cf10 \strokec10 0\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf8 \cb3 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Invalid user id or password. Please try again."\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \cb3 \strokec2 return\cf6 \strokec6  -\cf10 \strokec10 1\cf6 \strokec6 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3 \}\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 Node\cf4 \strokec4 *\cf6 \strokec6  \cf9 \strokec9 newNode\cf6 \strokec6 (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 , \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 node\cf6 \strokec6  = \cf2 \strokec2 new\cf6 \strokec6  \cf7 \strokec7 Node\cf6 \strokec6 ();\cb1 \
\cb3     \cf8 \strokec8 node\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6  = \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3     \cf8 \strokec8 node\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 =\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 ;\cb1 \
\cb3     \cf8 \strokec8 node\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6  = \cf4 \strokec4 NULL\cf6 \strokec6 ;\cb1 \
\cb3     \cf8 \strokec8 node\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6  = \cf4 \strokec4 NULL\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 return\cf6 \strokec6  \cf8 \strokec8 node\cf6 \strokec6 ;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 Node\cf4 \strokec4 *\cf6 \strokec6  \cf9 \strokec9 insert\cf6 \strokec6 (\cf7 \strokec7 Node\cf4 \strokec4 *\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 , \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 , \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 root\cf6 \strokec6  == \cf4 \strokec4 NULL\cf6 \strokec6 )\cb1 \
\cb3         \cf2 \strokec2 return\cf6 \strokec6  \cf9 \strokec9 newNode\cf6 \strokec6 (\cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 );\cb1 \
\cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 id\cf6 \strokec6  < \cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6 )\cb1 \
\cb3         \cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6  = \cf9 \strokec9 insert\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 );\cb1 \
\cb3     \cf2 \strokec2 else\cf6 \strokec6  \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 id\cf6 \strokec6  > \cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6 )\cb1 \
\cb3         \cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6  = \cf9 \strokec9 insert\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 );\cb1 \
\cb3     \cf2 \strokec2 return\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 ;\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf9 \strokec9 readData\cf6 \strokec6 (\cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 fileName\cf6 \strokec6 , \cf7 \strokec7 Node\cf4 \strokec4 *&\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 ifstream\cf6 \strokec6  \cf8 \strokec8 file\cf6 \strokec6 (\cf8 \strokec8 fileName\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 line\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 while\cf6 \strokec6  (\cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 file\cf6 \strokec6 , \cf8 \strokec8 line\cf6 \strokec6 )) \{\cb1 \
\cb3         \cf7 \strokec7 stringstream\cf6 \strokec6  \cf8 \strokec8 ss\cf6 \strokec6 (\cf8 \strokec8 line\cf6 \strokec6 );\cb1 \
\cb3         \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 ;\cb1 \
\cb3         \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3         \cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 ss\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 ,\cf5 \strokec5 ','\cf6 \strokec6 );\cb1 \
\cb3         \cf8 \strokec8 ss\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Read: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 ","\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 root\cf6 \strokec6  = \cf9 \strokec9 insert\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 );\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf9 \strokec9 inorderTraversal\cf6 \strokec6 (\cf7 \strokec7 Node\cf4 \strokec4 *\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 root\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf9 \strokec9 inorderTraversal\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6 );\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 ","\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf9 \strokec9 inorderTraversal\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6 );\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf9 \strokec9 compose\cf6 \strokec6 () \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 idString\cf6 \strokec6 ;\cb1 \
\cb3     \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 existingData\cf6 \strokec6 ;\cb1 \
\
\cb3     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter the message: "\cf6 \strokec6 ;\cb1 \
\cb3     \cf8 \strokec8 cin\cf6 \strokec6 .\cf9 \strokec9 ignore\cf6 \strokec6 ();\cb1 \
\cb3     \cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 cin\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 );\cb1 \
\
\cb3     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter the id: "\cf6 \strokec6 ;\cb1 \
\cb3     \cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 cin\cf6 \strokec6 , \cf8 \strokec8 idString\cf6 \strokec6 );\cb1 \
\cb3     \cf4 \strokec4 bool\cf6 \strokec6  \cf8 \strokec8 isValid\cf6 \strokec6  = \cf4 \strokec4 true\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 for\cf6 \strokec6  (\cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 i\cf6 \strokec6  = \cf10 \strokec10 0\cf6 \strokec6 ; \cf8 \strokec8 i\cf6 \strokec6  < \cf8 \strokec8 idString\cf6 \strokec6 .\cf9 \strokec9 length\cf6 \strokec6 (); \cf8 \strokec8 i\cf6 \strokec6 ++) \{\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6  (!\cf9 \strokec9 isdigit\cf6 \strokec6 (\cf8 \strokec8 idString\cf9 \strokec9 [\cf8 \strokec8 i\cf9 \strokec9 ]\cf6 \strokec6 )) \{\cb1 \
\cb3             \cf8 \strokec8 isValid\cf6 \strokec6  = \cf4 \strokec4 false\cf6 \strokec6 ;\cb1 \
\cb3             \cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 isValid\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf8 \strokec8 id\cf6 \strokec6  = \cf9 \strokec9 stoi\cf6 \strokec6 (\cf8 \strokec8 idString\cf6 \strokec6 );\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11         // Open the file in reading mode and read the existing data\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3         \cf7 \strokec7 ifstream\cf6 \strokec6  \cf8 \strokec8 file\cf6 \strokec6 (\cf5 \strokec5 "sent_box.csv"\cf6 \strokec6 );\cb1 \
\cb3         \cf8 \strokec8 existingData\cf6 \strokec6  \cf9 \strokec9 =\cf6 \strokec6  \cf7 \strokec7 string\cf6 \strokec6 (\cf7 \strokec7 istreambuf_iterator\cf6 \strokec6 <\cf4 \strokec4 char\cf6 \strokec6 >(\cf8 \strokec8 file\cf6 \strokec6 ), \cf7 \strokec7 istreambuf_iterator\cf6 \strokec6 <\cf4 \strokec4 char\cf6 \strokec6 >());\cb1 \
\cb3         \cf8 \strokec8 file\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11         // Add the new message and id at the top of the existing data\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3         \cf8 \strokec8 existingData\cf6 \strokec6  \cf9 \strokec9 =\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 +\cf6 \strokec6  \cf5 \strokec5 ","\cf6 \strokec6  \cf9 \strokec9 +\cf6 \strokec6  \cf8 \strokec8 idString\cf6 \strokec6  \cf9 \strokec9 +\cf6 \strokec6  \cf5 \strokec5 "\cf12 \strokec12 \\n\cf5 \strokec5 "\cf6 \strokec6  \cf9 \strokec9 +\cf6 \strokec6  \cf8 \strokec8 existingData\cf6 \strokec6 ;\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11         // Open the file in truncate mode and write the entire data to the file\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3         \cf7 \strokec7 ofstream\cf6 \strokec6  \cf8 \strokec8 fileOut\cf6 \strokec6 (\cf5 \strokec5 "sent_box.csv"\cf6 \strokec6 , \cf7 \strokec7 std\cf6 \strokec6 ::\cf7 \strokec7 ios_base\cf6 \strokec6 ::\cf8 \strokec8 trunc\cf6 \strokec6 );\cb1 \
\cb3         \cf8 \strokec8 fileOut\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 existingData\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 fileOut\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\cb3     \} \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Invalid id entered"\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11 // function that searches the node\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf7 \cb3 \strokec7 Node\cf4 \strokec4 *\cf6 \strokec6  \cf9 \strokec9 search\cf6 \strokec6 (\cf7 \strokec7 Node\cf4 \strokec4 *\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 , \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 , \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 word\cf6 \strokec6 , \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 choice\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 root\cf6 \strokec6  == \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf2 \strokec2 return\cf6 \strokec6  \cf4 \strokec4 NULL\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf2 \strokec2 if\cf6 \strokec6 (\cf8 \strokec8 choice\cf6 \strokec6  == \cf10 \strokec10 1\cf6 \strokec6 )\cb1 \
\cb3     \{\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6  == \cf8 \strokec8 id\cf6 \strokec6 )\cb1 \
\cb3         \{\cb1 \
\cb3             \cf2 \strokec2 return\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 id\cf6 \strokec6  < \cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6 )\cb1 \
\cb3             \cf2 \strokec2 return\cf6 \strokec6  \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3         \cf2 \strokec2 else\cf6 \cb1 \strokec6 \
\cb3             \cf2 \strokec2 return\cf6 \strokec6  \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3     \}\cb1 \
\cb3     \cf2 \strokec2 else\cf6 \cb1 \strokec6 \
\cb3     \{\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6 .\cf9 \strokec9 find\cf6 \strokec6 (\cf8 \strokec8 word\cf6 \strokec6 ) != \cf7 \strokec7 string\cf6 \strokec6 ::\cf8 \strokec8 npos\cf6 \strokec6 )\cb1 \
\cb3         \{\cb1 \
\cb3             \cf2 \strokec2 return\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 left_search\cf6 \strokec6  = \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6 (\cf8 \strokec8 left_search\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 )\cb1 \
\cb3         \{\cb1 \
\cb3             \cf2 \strokec2 return\cf6 \strokec6  \cf8 \strokec8 left_search\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf2 \strokec2 return\cf6 \strokec6  \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf9 \strokec9 printNode\cf6 \strokec6 (\cf7 \strokec7 Node\cf4 \strokec4 *\cf6 \strokec6  \cf8 \strokec8 node\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 node\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "id: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 node\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 ", message: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 node\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3     \} \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Node not found"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11 //  function that deletes nodes from the tree \cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf9 \strokec9 deleteNode\cf6 \strokec6 (\cf7 \strokec7 Node\cf4 \strokec4 *&\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 , \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 , \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 word\cf6 \strokec6 , \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 choice\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 nodeToDelete\cf6 \strokec6  = \cf4 \strokec4 NULL\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 choice\cf6 \strokec6  == \cf10 \strokec10 1\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf8 \strokec8 nodeToDelete\cf6 \strokec6  = \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3     \} \cf2 \strokec2 else\cf6 \strokec6  \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 choice\cf6 \strokec6  == \cf10 \strokec10 2\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf8 \strokec8 nodeToDelete\cf6 \strokec6  = \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 nodeToDelete\cf6 \strokec6  == \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Node doesn't exist"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf2 \strokec2 return\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11     // Find the node with minimum value in the right subtree\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 minNode\cf6 \strokec6  = \cf8 \strokec8 nodeToDelete\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 while\cf6 \strokec6  (\cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf8 \strokec8 minNode\cf6 \strokec6  = \cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11     // Replace the nodeToDelete's id and message with the minimum node\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf8 \strokec8 nodeToDelete\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6  = \cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3     \cf8 \strokec8 nodeToDelete\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 =\cf6 \strokec6  \cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11     // Delete the minimum node\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf9 \strokec9 deleteNode\cf6 \strokec6 (\cf8 \strokec8 minNode\cf6 \strokec6 , \cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6 , \cf10 \strokec10 1\cf6 \strokec6 );\cb1 \
\cb3     \} \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3             \cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 left\cf6 \strokec6  = \cf4 \strokec4 NULL\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3             \cf8 \strokec8 minNode\cf6 \strokec6 ->\cf8 \strokec8 right\cf6 \strokec6  = \cf4 \strokec4 NULL\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf2 \strokec2 delete\cf6 \strokec6  \cf8 \strokec8 minNode\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11     //Search for the node again\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 deletedNode\cf6 \strokec6  = \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3     \cf2 \strokec2 if\cf6 \strokec6 (\cf8 \strokec8 deletedNode\cf6 \strokec6  == \cf4 \strokec4 NULL\cf6 \strokec6 )\{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Node with id: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "and message: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 word\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 " is deleted"\cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11 //  function that deletes messages from the file\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf9 \strokec9 deleteFromFile\cf6 \strokec6 (\cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 fileName\cf6 \strokec6 , \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 , \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 word\cf6 \strokec6 , \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 choice\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 ifstream\cf6 \strokec6  \cf8 \strokec8 file\cf6 \strokec6 (\cf8 \strokec8 fileName\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 ofstream\cf6 \strokec6  \cf8 \strokec8 tempFile\cf6 \strokec6 (\cf5 \strokec5 "temp.csv"\cf6 \strokec6 );\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 line\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 ;\cb1 \
\cb3     \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 lineId\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 while\cf6 \strokec6  (\cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 file\cf6 \strokec6 , \cf8 \strokec8 line\cf6 \strokec6 )) \{\cb1 \
\cb3         \cf7 \strokec7 stringstream\cf6 \strokec6  \cf8 \strokec8 ss\cf6 \strokec6 (\cf8 \strokec8 line\cf6 \strokec6 );\cb1 \
\cb3         \cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 ss\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 , \cf5 \strokec5 ','\cf6 \strokec6 );\cb1 \
\cb3         \cf8 \strokec8 ss\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 lineId\cf6 \strokec6 ;\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6  ((\cf8 \strokec8 choice\cf6 \strokec6  == \cf10 \strokec10 1\cf6 \strokec6  && \cf8 \strokec8 id\cf6 \strokec6  != \cf8 \strokec8 lineId\cf6 \strokec6 ) || (\cf8 \strokec8 choice\cf6 \strokec6  == \cf10 \strokec10 2\cf6 \strokec6  && \cf8 \strokec8 word\cf6 \strokec6  \cf9 \strokec9 !=\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 )) \{\cb1 \
\cb3             \cf8 \strokec8 tempFile\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 ","\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 lineId\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf8 \strokec8 file\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\cb3     \cf8 \strokec8 tempFile\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\cb3     \cf9 \strokec9 remove\cf6 \strokec6 (\cf8 \strokec8 fileName\cf6 \strokec6 .\cf9 \strokec9 c_str\cf6 \strokec6 ());\cb1 \
\cb3     \cf9 \strokec9 rename\cf6 \strokec6 (\cf5 \strokec5 "temp.csv"\cf6 \strokec6 , \cf8 \strokec8 fileName\cf6 \strokec6 .\cf9 \strokec9 c_str\cf6 \strokec6 ());\cb1 \
\cb3 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11 // function that archives or unarchives the messages\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 void\cf6 \strokec6  \cf9 \strokec9 archive\cf6 \strokec6 (\cf7 \strokec7 Node\cf4 \strokec4 *&\cf6 \strokec6  \cf8 \strokec8 root\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 ;\cb1 \
\cb3     \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 fileName\cf6 \strokec6  = \cf5 \strokec5 "inbox.csv"\cf6 \strokec6 ;\cb1 \
\cb3     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter 1 to archive a message, 2 to unarchive a message: "\cf6 \strokec6 ;\cb1 \
\cb3     \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 choice\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 choice\cf6 \strokec6  == \cf10 \strokec10 1\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter the id of the message to archive: "\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3         \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 node\cf6 \strokec6  = \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf5 \strokec5 ""\cf6 \strokec6 , \cf10 \strokec10 1\cf6 \strokec6 );\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 node\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3             \cf7 \strokec7 ofstream\cf6 \strokec6  \cf8 \strokec8 archiveFile\cf6 \strokec6 (\cf5 \strokec5 "archived_messages.csv"\cf6 \strokec6 , \cf7 \strokec7 ios\cf6 \strokec6 ::\cf8 \strokec8 app\cf6 \strokec6 );\cb1 \
\cb3             \cf8 \strokec8 archiveFile\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 node\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 ","\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 node\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3             \cf8 \strokec8 archiveFile\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\cb3             \cf9 \strokec9 deleteNode\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 ,  \cf8 \strokec8 id\cf6 \strokec6 , \cf5 \strokec5 ""\cf6 \strokec6 , \cf10 \strokec10 1\cf6 \strokec6 );\cb1 \
\cb3             \cf9 \strokec9 deleteFromFile\cf6 \strokec6 (\cf8 \strokec8 fileName\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf5 \strokec5 ""\cf6 \strokec6 , \cf10 \strokec10 1\cf6 \strokec6 );\cb1 \
\cb3         \} \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3             \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Message not found"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \} \cf2 \strokec2 else\cf6 \strokec6  \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 choice\cf6 \strokec6  == \cf10 \strokec10 2\cf6 \strokec6 ) \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter the id of the message to unarchive: "\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3         \cf7 \strokec7 ifstream\cf6 \strokec6  \cf8 \strokec8 archiveFile\cf6 \strokec6 (\cf5 \strokec5 "archived_messages.csv"\cf6 \strokec6 );\cb1 \
\cb3         \cf7 \strokec7 ofstream\cf6 \strokec6  \cf8 \strokec8 tempFile\cf6 \strokec6 (\cf5 \strokec5 "temp.csv"\cf6 \strokec6 );\cb1 \
\cb3         \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 line\cf6 \strokec6 ;\cb1 \
\cb3         \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6 ;\cb1 \
\cb3         \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 lineId\cf6 \strokec6 ;\cb1 \
\cb3         \cf4 \strokec4 bool\cf6 \strokec6  \cf8 \strokec8 found\cf6 \strokec6  = \cf4 \strokec4 false\cf6 \strokec6 ;\cb1 \
\cb3         \cf2 \strokec2 while\cf6 \strokec6  (\cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 archiveFile\cf6 \strokec6 , \cf8 \strokec8 line\cf6 \strokec6 )) \{\cb1 \
\cb3             \cf7 \strokec7 stringstream\cf6 \strokec6  \cf8 \strokec8 ss\cf6 \strokec6 (\cf8 \strokec8 line\cf6 \strokec6 );\cb1 \
\cb3             \cf9 \strokec9 getline\cf6 \strokec6 (\cf8 \strokec8 ss\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 , \cf5 \strokec5 ','\cf6 \strokec6 );\cb1 \
\cb3             \cf8 \strokec8 ss\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 lineId\cf6 \strokec6 ;\cb1 \
\cb3             \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 id\cf6 \strokec6  != \cf8 \strokec8 lineId\cf6 \strokec6 ) \{\cb1 \
\cb3                 \cf8 \strokec8 tempFile\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 ","\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 lineId\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3             \} \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3                 \cf8 \strokec8 found\cf6 \strokec6  = \cf4 \strokec4 true\cf6 \strokec6 ;\cb1 \
\cb3                 \cf8 \strokec8 root\cf6 \strokec6  = \cf9 \strokec9 insert\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 lineId\cf6 \strokec6 , \cf8 \strokec8 message\cf6 \strokec6 );\cb1 \
\cb3                 \cf7 \strokec7 ofstream\cf6 \strokec6  \cf8 \strokec8 inboxFile\cf6 \strokec6 (\cf8 \strokec8 fileName\cf6 \strokec6 , \cf7 \strokec7 ios\cf6 \strokec6 ::\cf8 \strokec8 app\cf6 \strokec6 );\cb1 \
\cb3                 \cf8 \strokec8 inboxFile\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 ","\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 lineId\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                 \cf8 \strokec8 inboxFile\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cf2 \strokec2 if\cf6 \strokec6  (!\cf8 \strokec8 found\cf6 \strokec6 ) \{\cb1 \
\cb3             \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Message not found"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3         \cf8 \strokec8 archiveFile\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\cb3         \cf8 \strokec8 tempFile\cf6 \strokec6 .\cf9 \strokec9 close\cf6 \strokec6 ();\cb1 \
\cb3         \cf9 \strokec9 remove\cf6 \strokec6 (\cf5 \strokec5 "archived_messages.csv"\cf6 \strokec6 );\cb1 \
\cb3         \cf9 \strokec9 rename\cf6 \strokec6 (\cf5 \strokec5 "temp.csv"\cf6 \strokec6 , \cf5 \strokec5 "archived_messages.csv"\cf6 \strokec6 );\cb1 \
\cb3     \} \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Invalid choice"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11 // main function\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf4 \cb3 \strokec4 int\cf6 \strokec6  \cf9 \strokec9 main\cf6 \strokec6 () \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 root\cf6 \strokec6  = \cf4 \strokec4 NULL\cf6 \strokec6 ;\cb1 \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11     // Read data from inbox.csv and insert into binary tree\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf9 \strokec9 readData\cf6 \strokec6 (\cf5 \strokec5 "inbox.csv"\cf6 \strokec6 , \cf8 \strokec8 root\cf6 \strokec6 );\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11     // Read data from sent_box.csv and insert into binary tree\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3     \cf9 \strokec9 readData\cf6 \strokec6 (\cf5 \strokec5 "sent_box.csv"\cf6 \strokec6 , \cf8 \strokec8 root\cf6 \strokec6 );\cb1 \
\
\cb3     \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 choice\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 do\cf6 \strokec6  \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Menu:"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "1. If you want to   signup"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "2. If you want to  login"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "0. If you want to  exit"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter your choice: "\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 choice\cf6 \strokec6 ;\cb1 \
\cb3         \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3         \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 word\cf6 \strokec6 ;\cb1 \
\cb3         \cf2 \strokec2 switch\cf6 \strokec6  (\cf8 \strokec8 choice\cf6 \strokec6 ) \{\cb1 \
\cb3             \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 1\cf6 \strokec6 : \{\cb1 \
\cb3                  \cf9 \strokec9 createAccount\cf6 \strokec6 ();\cb1 \
\cb3             \}\cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3             \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 2\cf6 \strokec6 : \{\cb1 \
\cb3                 \cf2 \strokec2 if\cf6 \strokec6 (\cf9 \strokec9 login\cf6 \strokec6 ()==-\cf10 \strokec10 1\cf6 \strokec6 )\cb1 \
\cb3                 \{\cf2 \strokec2 break\cf6 \strokec6 ;\}\cb1 \
\cb3                 \cf2 \strokec2 else\cf6 \strokec6 \{\cb1 \
\cb3                 \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 choice1\cf6 \strokec6 ;\cb1 \
\cb3     \cf2 \strokec2 do\cf6 \strokec6  \{\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Menu:"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "1. If you want to  Search message by id"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "2. If you want to  Search message by word"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "3. If you want to Delete message  by id or word"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "4. If you want to Compose Message"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "5. If you want to archive a message"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "6. Exit"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter your choice: "\cf6 \strokec6 ;\cb1 \
\cb3         \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 choice1\cf6 \strokec6 ;\cb1 \
\cb3         \cf4 \strokec4 int\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3         \cf7 \strokec7 string\cf6 \strokec6  \cf8 \strokec8 word\cf6 \strokec6 ;\cb1 \
\cb3         \cf2 \strokec2 switch\cf6 \strokec6  (\cf8 \strokec8 choice1\cf6 \strokec6 ) \{\cb1 \
\cb3             \cb1 \
\cb3             \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 1\cf6 \strokec6 : \{\cb1 \
\cb3                 \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter id to search: "\cf6 \strokec6 ;\cb1 \
\cb3                 \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3                 \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 result\cf6 \strokec6  = \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf10 \strokec10 1\cf6 \strokec6 );\cb1 \
\cb3                 \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 result\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "ID: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 result\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Message: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 result\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                 \} \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Node doesn't exist"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 2\cf6 \strokec6 : \{\cb1 \
\cb3                 \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter word to search: "\cf6 \strokec6 ;\cb1 \
\cb3                 \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 word\cf6 \strokec6 ;\cb1 \
\cb3                 \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 result\cf6 \strokec6  = \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3                 \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 result\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "ID: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 result\cf6 \strokec6 ->\cf8 \strokec8 id\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Message: "\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf8 \strokec8 result\cf6 \strokec6 ->\cf8 \strokec8 message\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                 \} \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Node doesn't exist"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 3\cf6 \strokec6 : \{\cb1 \
\cb3                 \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter 1 to delete by id, 2 to delete by word: "\cf6 \strokec6 ;\cb1 \
\cb3                 \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 choice\cf6 \strokec6 ;\cb1 \
\cb3                 \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 choice\cf6 \strokec6  == \cf10 \strokec10 1\cf6 \strokec6 ) \{\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter id to delete: "\cf6 \strokec6 ;\cb1 \
\cb3                     \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 id\cf6 \strokec6 ;\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Enter word to delete: "\cf6 \strokec6 ;\cb1 \
\cb3                     \cf8 \strokec8 cin\cf6 \strokec6  \cf9 \strokec9 >>\cf6 \strokec6  \cf8 \strokec8 word\cf6 \strokec6 ;\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf7 \strokec7 Node\cf6 \strokec6 * \cf8 \strokec8 result\cf6 \strokec6  = \cf9 \strokec9 search\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3                 \cf2 \strokec2 if\cf6 \strokec6  (\cf8 \strokec8 result\cf6 \strokec6  != \cf4 \strokec4 NULL\cf6 \strokec6 ) \{\cb1 \
\pard\pardeftab720\sl360\partightenfactor0
\cf11 \cb3 \strokec11                   //  root = deleteNode(root, id, word, choice);\cf6 \cb1 \strokec6 \
\pard\pardeftab720\sl360\partightenfactor0
\cf6 \cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Node deleted"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                     \cf9 \strokec9 deleteFromFile\cf6 \strokec6 (\cf5 \strokec5 "inbox.csv"\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3                     \cf9 \strokec9 deleteFromFile\cf6 \strokec6 (\cf5 \strokec5 "sent_box.csv"\cf6 \strokec6 , \cf8 \strokec8 id\cf6 \strokec6 , \cf8 \strokec8 word\cf6 \strokec6 , \cf8 \strokec8 choice\cf6 \strokec6 );\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf2 \strokec2 else\cf6 \strokec6  \{\cb1 \
\cb3                     \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Node doesn't exist"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                 \}\cb1 \
\cb3                 \cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3             \}\cb1 \
\cb3             \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 4\cf6 \strokec6 : \{\cb1 \
\cb3               \cb1 \
\cb3           \cf9 \strokec9 compose\cf6 \strokec6 ();\cb1 \
\cb3           \cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 5\cf6 \strokec6 : \{\cb1 \
\cb3                \cb1 \
\cb3             \cf9 \strokec9 archive\cf6 \strokec6 (\cf8 \strokec8 root\cf6 \strokec6 );\cb1 \
\cb3                 \cb1 \
\cb3             \}\cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3             \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 6\cf6 \strokec6 : \{\cb1 \
\
\cb3                 \cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3             \}\cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3             \cf2 \strokec2 default\cf6 \strokec6 : \{\cb1 \
\cb3                 \cf8 \strokec8 cout\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf5 \strokec5 "Invalid choice"\cf6 \strokec6  \cf9 \strokec9 <<\cf6 \strokec6  \cf9 \strokec9 endl\cf6 \strokec6 ;\cb1 \
\cb3                 \cb1 \
\cb3             \}\cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\cb3         \}\cb1 \
\cb3     \} \cf2 \strokec2 while\cf6 \strokec6  (\cf8 \strokec8 choice1\cf6 \strokec6  != \cf10 \strokec10 6\cf6 \strokec6 );\}\}\cb1 \
\cb3     \cf2 \strokec2 break\cf6 \strokec6 ;\cb1 \
\
\cb3        \cf2 \strokec2 case\cf6 \strokec6  \cf10 \strokec10 0\cf6 \strokec6 :\cb1 \
\cb3         \{\cf2 \strokec2 break\cf6 \strokec6 ;\}\cf2 \strokec2 break\cf6 \strokec6 ;     \cb1 \
\cb3         \}\cb1 \
\cb3         \cb1 \
\cb3     \} \cf2 \strokec2 while\cf6 \strokec6  (\cf8 \strokec8 choice\cf6 \strokec6  != \cf10 \strokec10 0\cf6 \strokec6 );\cb1 \
\cb3       \cf2 \strokec2 return\cf6 \strokec6  \cf10 \strokec10 0\cf6 \strokec6 ;\cb1 \
\cb3 \}\cb1 \
\
\cb3             \cb1 \
}